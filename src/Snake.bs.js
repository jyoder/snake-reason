// Generated by BUCKLESCRIPT VERSION 5.0.3, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");

function _fullBody(snake) {
  return /* :: */[
          snake[/* head */1],
          snake[/* body */2]
        ];
}

function _adjacentTo($$location, direction) {
  switch (direction) {
    case 0 : 
        return /* record */[
                /* x */$$location[/* x */0] - 1 | 0,
                /* y */$$location[/* y */1]
              ];
    case 1 : 
        return /* record */[
                /* x */$$location[/* x */0] + 1 | 0,
                /* y */$$location[/* y */1]
              ];
    case 2 : 
        return /* record */[
                /* x */$$location[/* x */0],
                /* y */$$location[/* y */1] - 1 | 0
              ];
    case 3 : 
        return /* record */[
                /* x */$$location[/* x */0],
                /* y */$$location[/* y */1] + 1 | 0
              ];
    
  }
}

function _reverse(direction) {
  switch (direction) {
    case 0 : 
        return /* Right */1;
    case 1 : 
        return /* Left */0;
    case 2 : 
        return /* Down */3;
    case 3 : 
        return /* Up */2;
    
  }
}

function _opposites(d1, d2) {
  switch (d1) {
    case 0 : 
        return d2 === 1;
    case 1 : 
        return d2 === 0;
    case 2 : 
        return d2 >= 3;
    case 3 : 
        return d2 === 2;
    
  }
}

function _chooseDirection(old, next) {
  var match = _opposites(old, next);
  if (match) {
    return old;
  } else {
    return next;
  }
}

function _locationsOfDirections(start, directions) {
  if (directions) {
    return /* :: */[
            start,
            _locationsOfDirections(_adjacentTo(start, directions[0]), directions[1])
          ];
  } else {
    return /* [] */0;
  }
}

function make($$location, initialDirection) {
  return /* record */[
          /* location */$$location,
          /* head */_reverse(initialDirection),
          /* body : [] */0
        ];
}

function locations(snake) {
  return _locationsOfDirections(snake[/* location */0], _fullBody(snake));
}

function move(snake, direction) {
  var direction$1 = _chooseDirection(_reverse(snake[/* head */1]), direction);
  var list = _fullBody(snake);
  return /* record */[
          /* location */_adjacentTo(snake[/* location */0], direction$1),
          /* head */_reverse(direction$1),
          /* body */List.rev(List.tl(List.rev(list)))
        ];
}

function moveForward(snake) {
  return move(snake, _reverse(snake[/* head */1]));
}

function grow(snake) {
  var body = snake[/* body */2];
  if (body) {
    return /* record */[
            /* location */snake[/* location */0],
            /* head */snake[/* head */1],
            /* body */List.append(body, /* :: */[
                  List.nth(body, List.length(body) - 1 | 0),
                  /* [] */0
                ])
          ];
  } else {
    return /* record */[
            /* location */snake[/* location */0],
            /* head */snake[/* head */1],
            /* body : :: */[
              snake[/* head */1],
              /* [] */0
            ]
          ];
  }
}

exports.make = make;
exports.locations = locations;
exports.move = move;
exports.moveForward = moveForward;
exports.grow = grow;
/* No side effect */
