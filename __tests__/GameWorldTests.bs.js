// Generated by BUCKLESCRIPT VERSION 5.0.3, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var List = require("bs-platform/lib/js/list.js");
var Apple$Snake = require("../src/Apple.bs.js");
var Snake$Snake = require("../src/Snake.bs.js");
var GameWorld$Snake = require("../src/GameWorld.bs.js");

function _nextApple(param) {
  return Apple$Snake.make(/* record */[
              /* x */1,
              /* y */1
            ]);
}

var _gameWorld = GameWorld$Snake.make(/* record */[
      /* width */10,
      /* height */10
    ], /* Alive */0, Snake$Snake.make(/* record */[
          /* x */5,
          /* y */5
        ], /* Left */0), Apple$Snake.make(/* record */[
          /* x */3,
          /* y */5
        ]), _nextApple);

function _smallGameWorld(direction) {
  return GameWorld$Snake.make(/* record */[
              /* width */1,
              /* height */1
            ], /* Alive */0, Snake$Snake.make(/* record */[
                  /* x */0,
                  /* y */0
                ], direction), Apple$Snake.make(/* record */[
                  /* x */5,
                  /* y */5
                ]), _nextApple);
}

Jest.describe("dimensions", (function (param) {
        return Jest.test("returns the dimensions of the game world", (function (param) {
                      return Jest.Expect[/* toEqual */12](/* record */[
                                  /* width */10,
                                  /* height */10
                                ], Jest.Expect[/* expect */0](GameWorld$Snake.dimensions(_gameWorld)));
                    }));
      }));

Jest.describe("state", (function (param) {
        return Jest.test("returns the state of the game world", (function (param) {
                      return Jest.Expect[/* toEqual */12](/* Alive */0, Jest.Expect[/* expect */0](GameWorld$Snake.state(_gameWorld)));
                    }));
      }));

Jest.describe("snake", (function (param) {
        return Jest.test("returns the snake in the game world, initially located in the center", (function (param) {
                      return Jest.Expect[/* toEqual */12](/* :: */[
                                  /* record */[
                                    /* x */5,
                                    /* y */5
                                  ],
                                  /* [] */0
                                ], Jest.Expect[/* expect */0](Snake$Snake.locations(GameWorld$Snake.snake(_gameWorld))));
                    }));
      }));

Jest.describe("apple", (function (param) {
        return Jest.test("returns the apple in the game world", (function (param) {
                      return Jest.Expect[/* toEqual */12](/* record */[
                                  /* x */3,
                                  /* y */5
                                ], Jest.Expect[/* expect */0](Apple$Snake.$$location(GameWorld$Snake.apple(_gameWorld))));
                    }));
      }));

Jest.describe("tick", (function (param) {
        Jest.test("moves the snake based on the given input direction", (function (param) {
                return Jest.Expect[/* toEqual */12](/* :: */[
                            /* record */[
                              /* x */5,
                              /* y */4
                            ],
                            /* [] */0
                          ], Jest.Expect[/* expect */0](Snake$Snake.locations(GameWorld$Snake.snake(GameWorld$Snake.tick(_gameWorld, /* Up */2)))));
              }));
        Jest.test("moves the snake forward if no input direction is given", (function (param) {
                return Jest.Expect[/* toEqual */12](/* :: */[
                            /* record */[
                              /* x */4,
                              /* y */5
                            ],
                            /* [] */0
                          ], Jest.Expect[/* expect */0](Snake$Snake.locations(GameWorld$Snake.snake(GameWorld$Snake.tick(_gameWorld, undefined)))));
              }));
        Jest.test("generates a new apple if the snake eats the existing one", (function (param) {
                return Jest.Expect[/* toEqual */12](/* record */[
                            /* x */1,
                            /* y */1
                          ], Jest.Expect[/* expect */0](Apple$Snake.$$location(GameWorld$Snake.apple(GameWorld$Snake.tick(GameWorld$Snake.tick(_gameWorld, /* Left */0), /* Left */0)))));
              }));
        Jest.test("grows the snake when it eats the apple", (function (param) {
                return Jest.Expect[/* toEqual */12](2, Jest.Expect[/* expect */0](List.length(Snake$Snake.locations(GameWorld$Snake.snake(GameWorld$Snake.tick(GameWorld$Snake.tick(_gameWorld, /* Left */0), /* Left */0))))));
              }));
        Jest.test("kills the snake when it hits the left boundary", (function (param) {
                return Jest.Expect[/* toEqual */12](/* Dead */1, Jest.Expect[/* expect */0](GameWorld$Snake.state(GameWorld$Snake.tick(_smallGameWorld(/* Left */0), /* Left */0))));
              }));
        Jest.test("kills the snake when it hits the top boundary", (function (param) {
                return Jest.Expect[/* toEqual */12](/* Dead */1, Jest.Expect[/* expect */0](GameWorld$Snake.state(GameWorld$Snake.tick(_smallGameWorld(/* Up */2), /* Up */2))));
              }));
        Jest.test("kills the snake when it hits the right boundary", (function (param) {
                return Jest.Expect[/* toEqual */12](/* Dead */1, Jest.Expect[/* expect */0](GameWorld$Snake.state(GameWorld$Snake.tick(_smallGameWorld(/* Right */1), /* Right */1))));
              }));
        Jest.test("kills the snake when it hits the bottom boundary", (function (param) {
                return Jest.Expect[/* toEqual */12](/* Dead */1, Jest.Expect[/* expect */0](GameWorld$Snake.state(GameWorld$Snake.tick(_smallGameWorld(/* Down */3), /* Down */3))));
              }));
        return Jest.test("kills the snake when it eats itself", (function (param) {
                      var longSnake = Snake$Snake.grow(Snake$Snake.grow(Snake$Snake.grow(Snake$Snake.grow(Snake$Snake.make(/* record */[
                                            /* x */5,
                                            /* y */5
                                          ], /* Left */0)))));
                      var gameWorld = GameWorld$Snake.make(/* record */[
                            /* width */10,
                            /* height */10
                          ], /* Alive */0, longSnake, Apple$Snake.make(/* record */[
                                /* x */0,
                                /* y */0
                              ]), _nextApple);
                      return Jest.Expect[/* toEqual */12](/* Dead */1, Jest.Expect[/* expect */0](GameWorld$Snake.state(GameWorld$Snake.tick(GameWorld$Snake.tick(GameWorld$Snake.tick(gameWorld, /* Up */2), /* Right */1), /* Down */3))));
                    }));
      }));

exports._nextApple = _nextApple;
exports._gameWorld = _gameWorld;
exports._smallGameWorld = _smallGameWorld;
/* _gameWorld Not a pure module */
