// Generated by BUCKLESCRIPT VERSION 5.0.3, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Apple$Snake = require("../src/Apple.bs.js");
var Snake$Snake = require("../src/Snake.bs.js");
var GameRun$Snake = require("../src/GameRun.bs.js");
var GameWorld$Snake = require("../src/GameWorld.bs.js");

function _nextApple(param) {
  return Apple$Snake.make(/* record */[
              /* x */1,
              /* y */1
            ]);
}

function _gameWorld($staropt$star, param) {
  var direction = $staropt$star !== undefined ? $staropt$star : /* Left */0;
  return GameWorld$Snake.make(/* record */[
              /* width */3,
              /* height */3
            ], /* Alive */0, Snake$Snake.make(/* record */[
                  /* x */1,
                  /* y */1
                ], direction), Apple$Snake.make(/* record */[
                  /* x */0,
                  /* y */0
                ]), _nextApple);
}

Jest.describe("run", (function (param) {
        Jest.test("returns successive game states until the snake is dead", (function (param) {
                var match = GameRun$Snake.run(_gameWorld(undefined, /* () */0), undefined)[/* nextRun */0];
                var died;
                if (match !== undefined) {
                  var match$1 = Curry._1(match, undefined)[/* nextRun */0];
                  if (match$1 !== undefined) {
                    var match$2 = Curry._1(match$1, undefined)[/* nextRun */0];
                    died = match$2 === undefined;
                  } else {
                    died = false;
                  }
                } else {
                  died = false;
                }
                return Jest.Expect[/* toEqual */12](true, Jest.Expect[/* expect */0](died));
              }));
        Jest.test("returns commands to render the game world", (function (param) {
                var commands = GameRun$Snake.run(_gameWorld(undefined, /* () */0), undefined)[/* commands */1];
                return Jest.Expect[/* toEqual */12](/* Clear */Block.__(5, [/* White */0]), Jest.Expect[/* expect */0](List.hd(commands)));
              }));
        Jest.test("moves the snake up when the up arrow is pressed", (function (param) {
                var match = GameRun$Snake.run(_gameWorld(undefined, /* () */0), /* ArrowUp */2)[/* nextRun */0];
                var commands = match !== undefined ? Curry._1(match, undefined)[/* commands */1] : /* [] */0;
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            /* SetColor */Block.__(0, [/* Green */1]),
                            /* FillRect */Block.__(3, [
                                /* record */[
                                  /* x */15,
                                  /* y */0
                                ],
                                /* record */[
                                  /* width */15,
                                  /* height */15
                                ]
                              ])
                          ], Jest.Expect[/* expect */0](/* tuple */[
                                List.nth(commands, 1),
                                List.nth(commands, 2)
                              ]));
              }));
        Jest.test("moves the snake down when the down arrow is pressed", (function (param) {
                var match = GameRun$Snake.run(_gameWorld(undefined, /* () */0), /* ArrowDown */3)[/* nextRun */0];
                var commands = match !== undefined ? Curry._1(match, undefined)[/* commands */1] : /* [] */0;
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            /* SetColor */Block.__(0, [/* Green */1]),
                            /* FillRect */Block.__(3, [
                                /* record */[
                                  /* x */15,
                                  /* y */30
                                ],
                                /* record */[
                                  /* width */15,
                                  /* height */15
                                ]
                              ])
                          ], Jest.Expect[/* expect */0](/* tuple */[
                                List.nth(commands, 1),
                                List.nth(commands, 2)
                              ]));
              }));
        Jest.test("moves the snake left when the left arrow is pressed", (function (param) {
                var match = GameRun$Snake.run(_gameWorld(undefined, /* () */0), /* ArrowLeft */0)[/* nextRun */0];
                var commands = match !== undefined ? Curry._1(match, undefined)[/* commands */1] : /* [] */0;
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            /* SetColor */Block.__(0, [/* Green */1]),
                            /* FillRect */Block.__(3, [
                                /* record */[
                                  /* x */0,
                                  /* y */15
                                ],
                                /* record */[
                                  /* width */15,
                                  /* height */15
                                ]
                              ])
                          ], Jest.Expect[/* expect */0](/* tuple */[
                                List.nth(commands, 1),
                                List.nth(commands, 2)
                              ]));
              }));
        return Jest.test("moves the snake right when the right arrow is pressed", (function (param) {
                      var match = GameRun$Snake.run(_gameWorld(/* Right */1, /* () */0), /* ArrowRight */1)[/* nextRun */0];
                      var commands = match !== undefined ? Curry._1(match, undefined)[/* commands */1] : /* [] */0;
                      return Jest.Expect[/* toEqual */12](/* tuple */[
                                  /* SetColor */Block.__(0, [/* Green */1]),
                                  /* FillRect */Block.__(3, [
                                      /* record */[
                                        /* x */30,
                                        /* y */15
                                      ],
                                      /* record */[
                                        /* width */15,
                                        /* height */15
                                      ]
                                    ])
                                ], Jest.Expect[/* expect */0](/* tuple */[
                                      List.nth(commands, 1),
                                      List.nth(commands, 2)
                                    ]));
                    }));
      }));

exports._nextApple = _nextApple;
exports._gameWorld = _gameWorld;
/*  Not a pure module */
